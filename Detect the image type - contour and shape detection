void DetectAndDrawQuads(IplImage* img)
{
	
	int direction;
	CvSeq* contours,*contourARROW;
	CvSeq* result;
	CvMemStorage *storage = cvCreateMemStorage(0);
	IplImage* gray = cvCreateImage(cvGetSize(img), 8, 1); cvCvtColor(img,gray,CV_BGR2GRAY);
	cvThreshold(gray,gray,100,255,CV_THRESH_OTSU);//avg/threshold with a local min value rather than the value passed//CV_THRESH_BINARY
	cvErode(gray,gray,NULL,3);                                                                                          CV_THRESH_INV
	cvDilate(gray,gray,NULL,3);
	cvSmooth(gray, gray, CV_GAUSSIAN,3,0,0,0);
	IplImage* temp=cvCloneImage(gray);
	cvSmooth(temp, temp, CV_GAUSSIAN,3,0,0,0);
	int count=0,flag;
	cvFindContours(gray, storage, &contours, sizeof(CvContour), CV_RETR_LIST, CV_CHAIN_APPROX_SIMPLE, cvPoint(0,0));//CV_RETR_TREE-arranges the edges in form of tree 
	cvZero(gray);
	if(contours)
	{
		cvDrawContours(gray,contours,cvScalarAll(255),cvScalarAll(255),100);
	}
	cvNamedWindow("win2",CV_WINDOW_AUTOSIZE);
	cvNamedWindow("win3",CV_WINDOW_AUTOSIZE);
	cvShowImage("win2",gray);
	cvShowImage("win3",temp);
	CvSeq* cur_contour = contours;  
	 while(cur_contour)
	{
		count++;
		cur_contour=cur_contour->h_next;
	}
	cout<<"\nNo. of contours:"<<count<<"\n";
	if(count!=0)
	{
		if(count<=2)
		{
			flag=0;
			result = cvApproxPoly(contours, sizeof(CvContour), storage, CV_POLY_APPROX_DP, cvContourPerimeter(contours)*0.02, 0);
			if(result->total==12)
			{
				comm.send_data('o');
				printf("\nStop");/*call stop motor()*/
				fin=1;
			}
			else if(result->total==8 && sh_counter==0)
            		{
				printf("\nDead End");
				comm.send_data('s');
			}
			else if(result->total==7)
			{
				cvFindContours(temp, storage, &contourARROW, sizeof(CvContour), CV_RETR_LIST, CV_CHAIN_APPROX_NONE, cvPoint(0,0));
				direction=arrow_detect(img,contourARROW,result,flag);
				switch(direction)
				{
				case 0: comm.send_data('d');
					cout<<"\nTURN RIGHT";break;
				case 1:comm.send_data('a'); 
					cout<<"\nTURN LEFT";break;
				}
			}
			else
			{
				shape_detect(img,result,flag);
			}

	 	}
		else if(count>=3)
		{
			flag=1;
			while(count && contours!=NULL)
			{
				result = cvApproxPoly(contours, sizeof(CvContour), storage, CV_POLY_APPROX_DP, cvContourPerimeter(contours)*0.02, 0);
				if(result->total==7)
				{
					cvFindContours(temp, storage, &contourARROW, sizeof(CvContour), CV_RETR_LIST, CV_CHAIN_APPROX_NONE, cvPoint(0,0));
					if(count==2)
					contourARROW=contourARROW->h_next;
					direction=arrow_detect(img,contourARROW,result,flag);
					switch(direction)
					{
						case 0: comm.send_data('d');
							cout<<"\nTURN RIGHT";break;
						case 1: comm.send_data('a');
							cout<<"\nTURN LEFT";break;
					}
				}
				else
				{
					shape_detect(img,result,flag);
				}
				count--;
				contours=contours->h_next;
			}
		}
	}
	cvReleaseImage(&temp);
	cvReleaseImage(&temp);
        cvReleaseMemStorage(&storage);
 }
